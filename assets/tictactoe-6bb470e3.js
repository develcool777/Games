var d=Object.defineProperty;var b=(l,h,t)=>h in l?d(l,h,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[h]=t;var n=(l,h,t)=>(b(l,typeof h!="symbol"?h+"":h,t),t);(function(){"use strict";class l{constructor(t,s){n(this,"board");n(this,"boardSize");n(this,"score");n(this,"aiSide");n(this,"makeMove",t=>{switch(t){case"easy":return this.easyMove();case"normal":return this.normalMove();case"hard":return this.hardMove()}});n(this,"isWin",t=>{const s=this.boardSize===3?3:4,i=t.reduce((r,o)=>(r.length===s||((o===""||r.length!==0&&r.at(-1)!==o)&&(r=[]),r.push(o)),r),[]);return i.length===s?i[0]:""});n(this,"defineResult",()=>{for(let s=0;s<this.boardSize;s++){const i=this.isWin(this.board[s]);if(i!=="")return i}for(let s=0;s<this.boardSize;s++){const i=this.board.map(o=>o[s]),r=this.isWin(i);if(r!=="")return r}const t=this.getDiagonals;for(let s=0;s<t.length;s++){const i=this.isWin(t[s]);if(i!=="")return i}return this.getAvailableMoves.length===0?"d":""});n(this,"easyMove",()=>{const t=this.getAvailableMoves;return t[Math.floor(Math.random()*t.length)]});n(this,"normalMove",()=>({x:1,y:1}));n(this,"hardMove",()=>{let t=-1/0,s=null;return this.getAvailableMoves.forEach(i=>{this.board[i.x][i.y]=this.aiSide;const r=this.minMax(0,!1);this.board[i.x][i.y]="",r>t&&(s=i,t=r)}),s});n(this,"minMax",(t,s)=>{const i=this.defineResult();if(i!=="")return this.score[i];if(s){let o=-1/0;return this.getAvailableMoves.forEach(e=>{this.board[e.x][e.y]=this.aiSide;const a=this.minMax(t+1,!1);o=Math.max(o,a),this.board[e.x][e.y]=""}),o}let r=1/0;return this.getAvailableMoves.forEach(o=>{this.board[o.x][o.y]=this.aiSide==="x"?"o":"x";const e=this.minMax(t+1,!0);r=Math.min(r,e),this.board[o.x][o.y]=""}),r});this.board=JSON.parse(JSON.stringify(t)),this.boardSize=this.board.length,this.aiSide=s,this.score={x:s==="x"?10:-10,o:s==="o"?10:-10,d:0}}get getDiagonals(){const t=this.boardSize===3?3:4,s=[];let i=[];const r=()=>{i.length>=t&&s.push(i),i=[]};for(let o=0;o<this.boardSize;o++){for(let e=0;e<this.boardSize;e++){const a=o+e;if(a>=this.boardSize)break;i.push(this.board[a][e])}r();for(let e=this.boardSize-1;e>=0;e--){const a=this.boardSize-1+o-e;if(a>=this.boardSize)break;i.push(this.board[a][e])}if(r(),o!==0){for(let e=0;e<this.boardSize;e++){const a=e-o;a<0||i.push(this.board[a][e])}r();for(let e=this.boardSize-1;e>=0;e--){const a=this.boardSize-1-o-e;a<0||i.push(this.board[a][e])}r()}}return s}get getAvailableMoves(){return this.board.reduce((t,s,i)=>(s.forEach((r,o)=>{r===""&&t.push({x:i,y:o})}),t),[])}}self.onmessage=h=>{const t=JSON.parse(h.data),i=new l(t.board,t.player).makeMove(t.level);self.postMessage(i)}})();
