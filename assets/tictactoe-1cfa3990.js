var c=Object.defineProperty;var g=(f,h,e)=>h in f?c(f,h,{enumerable:!0,configurable:!0,writable:!0,value:e}):f[h]=e;var a=(f,h,e)=>(g(f,typeof h!="symbol"?h+"":h,e),e);(function(){"use strict";class f{constructor(e,i){a(this,"board");a(this,"boardSize");a(this,"score");a(this,"aiSide");a(this,"makeMove",e=>{switch(e){case"easy":return this.easyMove();case"normal":return this.normalMove();case"hard":return this.hardMove()}});a(this,"isWin",e=>{const i=this.boardSize===3?3:4,t=e.reduce((o,r)=>(o.length===i||((r===""||o.length!==0&&o.at(-1)!==r)&&(o=[]),o.push(r)),o),[]);return t.length===i?t[0]:""});a(this,"defineResult",()=>{for(let i=0;i<this.boardSize;i++){const t=this.isWin(this.board[i]);if(t!=="")return t}for(let i=0;i<this.boardSize;i++){const t=this.board.map(r=>r[i]),o=this.isWin(t);if(o!=="")return o}const e=this.getDiagonals;for(let i=0;i<e.length;i++){const t=this.isWin(e[i]);if(t!=="")return t}return this.getAvailableMoves.length===0?"d":""});a(this,"easyMove",()=>{const e=this.getAvailableMoves;return e[Math.floor(Math.random()*e.length)]});a(this,"normalMove",()=>({x:1,y:1}));a(this,"hardMove",()=>{let e=-1/0,i=null;return this.getAvailableMoves.forEach(t=>{this.board[t.x][t.y]=this.aiSide;const o=this.minMax(0,-1/0,1/0,!1);this.board[t.x][t.y]="",o>e&&(i=t,e=o)}),i});a(this,"minMax",(e,i,t,o)=>{const r=this.defineResult();if(r!=="")return this.score[r];const s=this.getAvailableMoves;if(o){let l=-1/0;for(let d=0;d<s.length;d++){const u=s[d];this.board[u.x][u.y]=this.aiSide;const b=this.minMax(e+1,i,t,!1);if(this.board[u.x][u.y]="",l=Math.max(l,b),i=Math.max(i,l),t<=i)break}return l}let n=1/0;for(let l=0;l<s.length;l++){const d=s[l];this.board[d.x][d.y]=this.aiSide==="x"?"o":"x";const u=this.minMax(e+1,i,t,!0);if(this.board[d.x][d.y]="",n=Math.min(n,u),t=Math.min(t,n),t<=i)break}return n});this.board=JSON.parse(JSON.stringify(e)),this.boardSize=this.board.length,this.aiSide=i,this.score={x:i==="x"?10:-10,o:i==="o"?10:-10,d:0}}get getDiagonals(){const e=this.boardSize===3?3:4,i=[];let t=[];const o=()=>{t.length>=e&&i.push(t),t=[]};for(let r=0;r<this.boardSize;r++){for(let s=0;s<this.boardSize;s++){const n=r+s;if(n>=this.boardSize)break;t.push(this.board[n][s])}o();for(let s=this.boardSize-1;s>=0;s--){const n=this.boardSize-1+r-s;if(n>=this.boardSize)break;t.push(this.board[n][s])}if(o(),r!==0){for(let s=0;s<this.boardSize;s++){const n=s-r;n<0||t.push(this.board[n][s])}o();for(let s=this.boardSize-1;s>=0;s--){const n=this.boardSize-1-r-s;n<0||t.push(this.board[n][s])}o()}}return i}get getAvailableMoves(){return this.board.reduce((e,i,t)=>(i.forEach((o,r)=>{o===""&&e.push({x:t,y:r})}),e),[])}}self.onmessage=h=>{const e=JSON.parse(h.data),t=new f(e.board,e.player).makeMove(e.level);self.postMessage(t)}})();
